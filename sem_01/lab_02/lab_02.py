'''Лабораторная работа №2
   "Вычисление различных значений в треугольнике"

   Программа вычисляет длину сторон треугольника,
   высоты, проведённой из большего угла этого
   треугольника, определяет, является ли треугольник
   прямоугольным, лежит ли точка внутри треугольника,
   если лежит, вычисляет расстояние от этой точки до
   наиболее удалённой стороны или её продолжения.

   Переменные, используемые в программе:
   x1 -- координата x первой вершины;
   y1 -- координата y первой вершины;
   x2 -- координата x второй вершины;
   y2 -- координата y второй вершины;
   x3 -- координата x третий вершины;
   y3 -- координата y третий вершины;
   x0 -- координата x произвольной точки;
   y0 -- координата y произвольной точки;
   difx12 -- разность координат x первой и второй вершин;
   difx13 -- разность координат x первой и третьей вершин; 
   difx23 -- разность координат x второй и третьей вершин;
   dify12 -- разность координат y первой и второй вершин;
   dify13 -- разность координат y первой и третьей вершин; 
   dify23 -- разность координат y второй и третьей вершин;
   sqside1 -- квадрат первой стороны;
   sqside2 -- квадрат второй стороны;
   sqside3 -- квадрат третьей стороны;
   side1 -- длина первой стороны треугольника;
   side2 -- длина второй стороны треугольника;
   side3 -- длина третьей стороны треугольника;
   max_side -- наибольшая сторона треугольника;
   per -- периметр треугольника;
   max_sqside -- квадрат наибольшей высоты;
   sqper -- сумма квадратов трёх сторон;
   us1 -- удвоенная сторона side1;
   us2 -- удвоенная сторона side2;
   us3 -- удвоенная сторона side3;
   square -- площадь треугольника;
   height -- длина высоты, проведённой из наибольшего угла;
   difx01 -- разность координат x первой вершины и точки (x0, y0);
   difx02 -- разность координат x второй вершины и точки (x0, y0);
   difx03 -- разность координат x третьей вершины и точки (x0, y0);
   dify01 -- разность координат y первой вершины и точки (x0, y0);
   dify02 -- разность координат y второй вершины и точки (x0, y0);
   dify03 -- разность координат y третьей вершины и точки (x0, y0);
   addside1 -- расстояние от точки (x0, y0) до первой вершины;
   addside2 -- расстояние от точки (x0, y0) до второй вершины;
   addside3 -- расстояние от точки (x0, y0) до третьей вершины;
   uas1 -- удвоенная сторона addside1;
   uas2 -- удвоенная сторона addside2;
   uas3 -- удвоенная сторона addside3;
   sqtr1 -- площадь треугольника, образованного первой и второй вершинами
            данного треугольника и точкой (x0, y0);
   sqtr2 -- площадь треугольника, образованного первой и третьей вершинами
            данного треугольника и точкой (x0, y0);
   sqtr3 -- площадь треугольника, образованного второй и третьей вершинами
            данного треугольника и точкой (x0, y0);
   h1 -- расстояние от точки (x0, y0) до side1;
   h2 -- расстояние от точки (x0, y0) до side2;
   h3 -- расстояние от точки (x0, y0) до side3;
   max_height -- расстояние от точки до наиболее удалённой стороны треугольника.

   Тестовый пример.
   Входные данные:
   0 0
   3 0
   0 2
   1 1
   Выходные данные:
   Длины сторон треугольника: 3.0000 2.0000 3.6056
   Высота из наибольшего угла: 1.6641
   Треугольник является прямоугольным.
   Точка лежит внутри треугольника.
   Расстояние от точки до наиболее удалённой стороны: 1.0000
'''

from math import sqrt

print('Координаты точек -- целые числа, вводятся через пробел.')

#ввод координат трёх вершин треугольника
x1,y1 = map(int, input('Введите координаты первой вершины: ').split())
x2,y2 = map(int, input('Введите координаты второй вершины: ').split())
x3,y3 = map(int, input('Введите координаты третьей вершины: ').split())

#вычисление длин сторон треугольника
difx12 = x1-x2
difx13 = x1-x3
difx23 = x2-x3
dify12 = y1-y2
dify13 = y1-y3
dify23 = y2-y3
sqside1 = difx12*difx12 + dify12*dify12
sqside2 = difx13*difx13 + dify13*dify13
sqside3 = difx23*difx23 + dify23*dify23
side1 = sqrt(sqside1)
side2 = sqrt(sqside2)
side3 = sqrt(sqside3)

#нахождение наибольшей стороны треугольника
max_side = max(side1, side2, side3)
#нахождение периметра треугольника
per = side1+side2+side3

#проверка существования треугольника
if side1 == side2 == side3 == 0:
    print('Три вершины совпадают.')
elif max_side == per-max_side:
    print('Три вершины лежат на одной прямой.')
else:
    #вывод сторон
    print('Длины сторон треугольника:',
          '{:6.4f} {:6.4f} {:6.4f}'.format(side1, side2, side3))

    #вычисление площади треугольника
    us1 = 2*side1
    us2 = 2*side2
    us3 = 2*side3
    square = 0.25*sqrt(per * (per-us1) * (per-us2) * (per-us3))
    #вычисление высоты, проведённой из наибольшего угла
    height = 2*square/max_side
    #вывод высоты из наибольшего угла
    print('Высота из наибольшего угла: ', '{:6.4f}'.format(height))

    #нахождение наибольшего квадрата стороны треугольника
    max_sqside = max(sqside1, sqside2, sqside3)
    #нахождение суммы квадратов трёх сторон
    sqper = sqside1+sqside2+sqside3
    # проверка, является ли треугольник прямоугольным, и вывод результата
    if max_sqside == sqper-max_sqside:
        print('Треугольник является прямоугольным.')
    else:
        print('Треугольник не является прямоугольным.')

    #ввод координат точки для проверки её принадлежности тругольнику
    x0, y0 = map(int, input('Введите координаты точки, пренадлежность '
                            'треугольнику которой хотите проверить: ').split())

    #проверка принадлежности точки треугольнику методом площадей

    #вычисление сторон треугольников, образованных 2-мя вершинами
    #данного треугольника и данной точкой
    difx01 = x0-x1
    difx02 = x0-x2
    difx03 = x0-x3
    dify01 = y0-y1
    dify02 = y0-y2
    dify03 = y0-y3
    addside1 = sqrt(difx01*difx01 + dify01*dify01)
    addside2 = sqrt(difx02*difx02 + dify02*dify02)
    addside3 = sqrt(difx03*difx03 + dify03*dify03)

    #вычисление периметров этих треугольников
    pertr1 = side1+addside1+addside2
    pertr2 = side2+addside1+addside3
    pertr3 = side3+addside2+addside3

    #вычесление площадей этих треугольников
    uas1 = 2*addside1
    uas2 = 2*addside2
    uas3 = 2*addside3
    sqtr1 = 0.25*sqrt(pertr1 * (pertr1-us1) * (pertr1-uas1) * (pertr1-uas2))
    sqtr2 = 0.25*sqrt(pertr2 * (pertr2-us2) * (pertr2-uas1) * (pertr2-uas3))
    sqtr3 = 0.25*sqrt(pertr3 * (pertr3-us3) * (pertr3-uas2) * (pertr3-uas3))

    if abs(sqtr1+sqtr2+sqtr3 - square) <= 1e-10:
        print('Точка лежит внутри треугольника.')

        #вычисление расстояния от точки (x0, y0) до наиболее удалённой стороны
        h1 = 2*sqtr1/side1
        h2 = 2*sqtr2/side2
        h3 = 2*sqtr3/side3
        max_height = max(h1, h2, h3)

        print('Расстояние от точки до наиболее удалённой стороны:',
              '{:6.4f}'.format(max_height))
    else:
        print('Точка лежит вне треугольника.')


